{"version":3,"sources":["services/fetchApi.js","services/parserQuestions.js","services/fetchQuestions.js","services/storage.js","components/_Welcome.js","components/_Question.js","components/_AnswerRecords.js","components/_Questions.js","components/App.js","index.js"],"names":["generateRandomNumbers","qty","numbers","length","random","Math","floor","includes","push","parseQuestionsResponse","questionsResponse","questions","Object","keys","forEach","number","generateQuestion","fact","formatFact","generateOptions","parseFact","replace","toUpperCase","slice","solution","parseInt","sort","fetchQuestions","randomNumbers","join","fetch","then","response","json","fetchApi","data","restoreQuestions","JSON","parse","localStorage","getItem","updateStoredQuestions","index","answersList","setItem","stringify","WelcomeWrapper","styled","div","Button","button","theme","colors","primary","Welcome","to","target","QuestionText","p","AnswersWrapper","ul","AnswerItem","li","CircleSelect","secondary","Question","props","question","map","option","onClick","saveUserAnswer","className","userAnswer","UserAnswerListItem","Line","AnswerRecords","answer","status","aria-hidden","black","Questions","useState","indexQuestions","setIndexQuestions","setQuestion","setUserAnswer","setAnswerList","disabled","setDisabled","nextQuestion","nextIndexQuestion","setGameOver","buttonDisabled","gameOver","e","selectedItem","currentTarget","innerText","newAnswersList","concat","updateQuestions","resetGame","GlobalStyle","createGlobalStyle","dark","MainWrapper","main","white","spacing","Title","h1","App","setQuestions","removeItem","window","location","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4cb3f173.chunk.js","sourcesContent":["const ENDPOINT = 'http://numbersapi.com/';\n\nconst qtyQuestions = 10;\n\nconst fetchApi = () => {\n  const randomNumbers = generateRandomNumbers(qtyQuestions).join();\n\n  return fetch(ENDPOINT + randomNumbers)\n    .then(response => response.json());\n}\n\nconst generateRandomNumbers = (qty) => {\n  let numbers = [];\n  while (numbers.length < qty) {\n    let random = Math.floor(Math.random() * 100);\n    if (!numbers.includes(random))\n      numbers.push(random);\n  }\n\n  return numbers;\n}\n\nexport { fetchApi, generateRandomNumbers };","\n/*\nconst questions = [\n    { \"question\": \"Is the number of dimensions of a line.\", \"solution\": \"1\", \"options\": [\"3\", \"1\", \"0\", \"4\"] },\n    { \"question\": \"Is the number of polynucleotide strands in a DNA double helix.\", \"answer\": \"2\", \"answers\": [\"2\", \"4\", \"0\", \"5\"] },\n    { \"question\": \"Is the number of sets needed to be won to win the whole match in volleyball.\", \"options\": \"3\", \"answers\": [\"2\", \"4\", \"3\", \"5\"] },\n    { \"question\": \"Is the highest score possible in Olympics gymnastics competitions.\", \"options\": \"10\", \"answers\": [\"9\", \"14\", \"20\", \"10\"] }\n]\n  */\nconst parseQuestionsResponse = (questionsResponse) => {\n    let questions = [];\n\n    Object.keys(questionsResponse).forEach((number) => {\n        questions.push(generateQuestion(number, questionsResponse[number]));\n    });\n\n    return questions;\n}\n\n// return example: { \"question\": \"Is the number of dimensions of a line.\", \"solution\": \"1\", \"options\": [\"3\", \"1\", \"0\", \"4\"] }\nconst generateQuestion = (number, fact) => {\n    return {\n        \"question\": formatFact(number, fact),\n        \"solution\": number,\n        \"options\": generateOptions(number)\n    };\n}\n\n// \"1 is the number of dimensions of a line.\" => \"Is the number of dimensions of a line.\"\nconst formatFact = (number, fact) => {\n    const parseFact = fact.replace(number + \" \", \"\");\n\n    return parseFact[0].toUpperCase() + parseFact.slice(1);\n}\n\n// Return example [2, 3, {solution}, 5]\nconst generateOptions = (solution) => {\n    let numbers = [parseInt(solution)];\n    while (numbers.length < 4) {\n        let random = Math.floor(Math.random() * 100);\n        if (!numbers.includes(random))\n            numbers.push(random);\n    }\n    return numbers.sort(() => Math.random() - 0.5);\n}\n\nexport { parseQuestionsResponse };","import { fetchApi } from './fetchApi';\nimport { parseQuestionsResponse } from './parserQuestions';\nimport { getLocal, setLocal } from './storage';\n\n\nconst fetchQuestions = () => {\n    return fetchApi()\n        .then(data => {\n            return {\n                'questions': parseQuestionsResponse(data),\n                'index': 0,\n                'answersList': []\n            };\n        });   \n}\n\nconst restoreQuestions = () => {\n    return getLocal();\n }\n\n\nconst updateStoredQuestions = (questions, index, answersList) => { \n    setLocal({ 'questions': questions, 'index': index, 'answersList': answersList });\n}\n\nconst clearQuestions = () => {\n    localStorage.removeItem(\"questions\");\n};\n\nexport { fetchQuestions, restoreQuestions, updateStoredQuestions, clearQuestions };","const setLocal = (data) => { \n    localStorage.setItem('questions', JSON.stringify(data));\n};\nconst getLocal = () => { \n    return JSON.parse(localStorage.getItem('questions'));\n};\n\nexport {setLocal, getLocal};","import React from 'react'; \nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n\nconst WelcomeWrapper = styled.div`\n   text-align: center;\n`;\n\nconst Button = styled.button`\n   background-color: ${({ theme }) => { return theme.colors.primary }};\n   border: none;\n   color: black;\n   padding: 15px 32px;\n   text-align: center;\n   text-decoration: none;\n   font-weight: 800;\n   display: inline-block;\n   font-size: 16px;\n   text-transform: uppercase;\n`;\n\n\nfunction Welcome() {\n    return (\n        <WelcomeWrapper>\n            <h3>\n                Welcome to Trividado number quiz!\n            </h3>\n            <Link to=\"/trivial\">\n                <Button\n                    target=\"_blank\"\n                >\n                    Start\n              </Button>\n            </Link>\n        </WelcomeWrapper >\n    );\n}\n\nexport default Welcome;\n","\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst QuestionText = styled.p`\n    font-size: calc(10px + 2vmin);\n    padding: 10px 15px;\n    line-height: 1.5;\n`;\n\nconst AnswersWrapper = styled.ul`\n    list-style: none;\n    width: 20rem; \n    display: flex;\n    align-item: center;\n    justify-content: space-between;\n    margin: 0 auto;\n    flex-wrap: wrap;\n`;\n\nconst AnswerItem = styled.li`\n    flex-basis: 50%;\n    align-items: center;\n    line-height: 2;\n \n`;\n\nconst CircleSelect = styled.div`\n    border-radius: 50%;\n    display: inline-block;\n    width: 1.3rem;\n    height: 1.3rem;\n    background-color: ${({ theme }) => { return theme.colors.primary }};\n    margin: auto 12px 0;\n    text-align: center;\n    &.selected{\n        background-color:${({ theme }) => { return theme.colors.secondary }};\n`;\n\n\nfunction Question(props) {\n    return (\n        <>\n            <QuestionText>{props.question[\"question\"]}</QuestionText>\n            <AnswersWrapper>\n                {props.question[\"options\"].map((option, index) => \n                    <AnswerItem key={index} onClick={props.saveUserAnswer}>\n                    <CircleSelect className={parseInt(props.userAnswer) === option ? 'selected' : \"\"}></CircleSelect>{option}\n                  </AnswerItem>  \n                )}\n            </AnswersWrapper>\n        </>\n    );\n}\n\nexport default Question;","import React from 'react';\nimport styled from 'styled-components';\n\n \nconst UserAnswerListItem = styled.li`\n    list-style: none;\n    line-height: 1.5;\n    padding: 10px;\n\n    & .answer {\n        display:flex;\n        justify-content:center;\n        align-items: center;\n        i {\n          margin-right: 8px;\n          font-size: 2em;\n        }\n        & span{\n            display: inline-block;\n            vertical-align: middle;\n            color: ${({ theme }) => { return theme.colors.secondary }};\n            font-weight: 100;\n            font-size: 0.7em;\n            margin-left: 3px;\n            }\n        &.error{\n            p,i{\n                color: red;\n            }\n        }\n        &.ok {\n            i,p{\n                color: ${({ theme }) => { return theme.colors.primary }};\n            }\n        }\n    }\n`;\n\nconst Line = styled.div`\n    border-top: 1px solid #f5f5f5;  \n    padding: 10px;\n`;\n\nfunction AnswerRecords(props) {\n   \n    const answersList = props.answersList;\n\n   \n    return (\n        <div>\n            <ul>\n                {answersList.map((answer,index) =>\n                    <UserAnswerListItem key={answer.solution + index}>\n                        <Line></Line>\n                        <p>{answer.question}</p>\n                        <div className={answer.status === 'Correct' ? 'answer ok' : \"answer error\"}>\n                            {answer.status === 'Correct' ? <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i> : <i className=\"fa fa-times-circle\" aria-hidden=\"true\"></i>} \n                            <p>\n                            {answer.status=== 'Correct' ? '' : answer.status}\n                            {answer.status === 'Correct' ? answer.solution : <span>- Rigth answer was { answer.solution}</span>}\n                            </p>\n                        </div>\n                    </UserAnswerListItem>\n                )}\n           </ul>\n        </div>\n    );\n}     \n\nexport default AnswerRecords;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Question from './_Question';\nimport AnswerRecords from './_AnswerRecords';\n\nconst Button = styled.button`\n   background-color: ${props => props.primary ? ({ theme }) => { return theme.colors.primary } : ({ theme }) => { return theme.colors.secondary }};\n   width: 140px;\n   border: none;\n   color: ${({ theme }) => { return theme.colors.black }};\n   padding: 15px 19px;\n   text-decoration: none;\n   font-weight: 800;\n   display: inline-block;\n   font-size: 16px;\n   text-transform: uppercase;\n   margin-top: 40px;\n   margin-bottom: 40px;\n   margin-right: 20px;\n\n   &:last-of-type{\n      margin-right: 0;\n}\n`;\n \nfunction Questions(props) {\n    const questions = props.questions.questions;\n    const [indexQuestions, setIndexQuestions] = useState(props.questions.index);\n    const [question, setQuestion] = useState(questions[0]);\n    const [userAnswer, setUserAnswer] = useState();\n    const [answersList, setAnswerList] = useState(props.questions.answersList);\n    const [disabled, setDisabled] = useState(false);\n\n    const saveUserAnswer = (e) => { \n        const selectedItem = e.currentTarget;\n        setUserAnswer(selectedItem.innerText);\n    }\n\n    const confirmQuestion = () => {\n        let status = 'Correct';\n        if (userAnswer !== question[\"solution\"])\n        {\n            status = 'Error';\n        } \n\n        const newAnswersList = answersList.concat([\n            {\n                \"question\": question[\"question\"],\n                \"status\": status,\n                \"solution\": question[\"solution\"]\n            }\n        ])\n        props.updateQuestions(questions, newAnswersList.length - 1, answersList);\n        setAnswerList(newAnswersList);\n        nextQuestion();\n        buttonDisabled();\n    }\n\n    const skipQuestion = () => {\n        const newAnswersList = answersList.concat([\n            {\n                \"question\": question[\"question\"],\n                \"status\": \"Skipped\",\n                \"solution\": question[\"solution\"]\n            }\n        ]);\n        props.updateQuestions(questions, newAnswersList.length - 1, answersList);\n        setAnswerList(newAnswersList);\n        nextQuestion();\n        buttonDisabled();\n    }\n\n    const nextQuestion = () => { \n        if (indexQuestions < questions.length - 1)\n        {\n            let nextIndexQuestion = indexQuestions + 1;\n            setIndexQuestions(nextIndexQuestion);\n            setQuestion(questions[nextIndexQuestion]);\n        } else\n        { \n            props.setGameOver(true);\n        }\n        \n    }\n\n    const buttonDisabled = () => {\n        if (indexQuestions === questions.length - 1)\n        setDisabled(true);\n    }\n    return (\n        <>    \n            <h2>Question {indexQuestions + 1} of {questions.length}</h2> \n            <div>\n                {!props.gameOver && question && <Question question={question} saveUserAnswer={saveUserAnswer} userAnswer={userAnswer} />}\n            </div>\n            <div>\n                {!props.gameOver && <Button onClick={confirmQuestion} disabled={disabled}>Confirm</Button>}\n                {!props.gameOver && <Button onClick={skipQuestion} disabled={disabled} primary>Skip</Button>}\n            </div>   \n            <AnswerRecords answersList={answersList} />\n            { props.gameOver && <Button onClick={props.resetGame} primary>Play Again</Button> }\n        </>\n    );\n}\n\nexport default Questions;\n","import styled, { createGlobalStyle } from 'styled-components';\nimport React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { fetchQuestions, restoreQuestions, updateStoredQuestions, clearQuestions } from '../services/fetchQuestions';\nimport Welcome from './_Welcome';\nimport Questions from './_Questions';\n\n\nconst GlobalStyle = createGlobalStyle`\n  *{\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: sans-serif;\n  }\n  body{\n    background-color: ${ ({ theme }) => { return theme.colors.dark } };;\n  }\n`;\n\nconst MainWrapper = styled.main`\n  min-height: 100vh;\n  max-width: 1200px;\n  display: flex;\n  flex-direction: column; \n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 1.5vmin);\n  color: ${ ({ theme }) => { return theme.colors.white } };\n  line-height: ${ ({ theme }) => theme.spacing[2] }rem;\n  text-align: center;\n  margin: 0 auto; \n`;\n\nconst Title = styled.h1`\n  text-transform: uppercase;\n  font-size: calc(10px + 6vmin);\n`;\n\nfunction App() {\n  const [questions, setQuestions] = useState(restoreQuestions());\n  const [answersList, setAnswerList] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  if (!questions)\n  {\n    fetchQuestions()\n      .then(questions => {\n        setQuestions(questions);\n      });\n  }\n  \n  const resetGame = () => { \n    setGameOver(false);\n    clearQuestions();\n    window.location = \"/\"; \n  }\n\n  const updateQuestions = (questions, index, answersList) => { \n    updateStoredQuestions(questions, index, answersList);\n  };\n  return (\n    <>\n       <GlobalStyle />\n      <MainWrapper>\n        <Title>\n          Trividado\n        </Title>\n        <Switch>\n            <Route exact path=\"/\" render={props => <Welcome {...props} />} />\n            <Route path=\"/trivial\" render={props => <Questions {...props} questions={questions} answersList={answersList} setAnswerList={setAnswerList} resetGame={resetGame}\n              setGameOver={setGameOver} gameOver={gameOver} updateQuestions={updateQuestions} />\n            } />\n        </Switch> \n      </MainWrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { ThemeProvider } from 'styled-components';\nimport { HashRouter } from 'react-router-dom';\n\nconst theme = {\n  colors: {\n    primary: '#70b25e', //green\n    secondary: '#ccc', // grey\n    dark: '#282c34', // page background\n    white: '#ffffff',\n    black: '#333333'\n  },\n  spacing: [0, 4, 8, 12, 16, 20],\n}\n\nReactDOM.render(\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}