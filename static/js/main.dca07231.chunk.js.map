{"version":3,"sources":["services/fetchApi.js","services/parserQuestions.js","services/fetchQuestions.js","services/storage.js","components/_Welcome.js","components/_Question.js","components/_AnswerRecords.js","components/_Questions.js","components/App.js","index.js"],"names":["generateRandomNumbers","qty","numbers","length","random","Math","floor","includes","push","parseQuestionsResponse","questionsResponse","questions","Object","keys","forEach","number","generateQuestion","fact","formatFact","generateOptions","parseFact","replace","toUpperCase","slice","solution","parseInt","sort","fetchQuestions","randomNumbers","join","fetch","then","response","json","fetchApi","data","restoreQuestions","JSON","parse","localStorage","getItem","updateStoredQuestions","index","answersList","setItem","stringify","WelcomeWrapper","styled","div","_templateObject","_taggedTemplateLiteral","Button","button","_templateObject2","_ref","theme","colors","primary","Welcome","_jsxs","children","_jsx","Link","to","target","QuestionText","p","AnswersWrapper","ul","AnswerItem","li","_templateObject3","CircleSelect","_templateObject4","_ref2","secondary","Question","props","_Fragment","question","map","option","onClick","saveUserAnswer","className","userAnswer","UserAnswerListItem","Line","AnswerRecords","answer","status","_ref3","black","Questions","_useState","useState","_useState2","_slicedToArray","indexQuestions","setIndexQuestions","_useState3","_useState4","setQuestion","_useState5","_useState6","setUserAnswer","_useState7","_useState8","setAnswerList","_useState9","_useState10","disabled","setDisabled","nextQuestion","nextIndexQuestion","setGameOver","buttonDisabled","gameOver","e","selectedItem","currentTarget","innerText","newAnswersList","concat","updateQuestions","resetGame","GlobalStyle","createGlobalStyle","dark","MainWrapper","main","white","spacing","Title","h1","App","setQuestions","removeItem","window","location","Switch","Route","exact","path","render","_objectSpread","ReactDOM","HashRouter","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.dca07231.chunk.js","sourcesContent":["const ENDPOINT = 'http://numbersapi.com/';\n\nconst qtyQuestions = 10;\n\nconst fetchApi = () => {\n  const randomNumbers = generateRandomNumbers(qtyQuestions).join();\n\n  return fetch(ENDPOINT + randomNumbers)\n    .then(response => response.json());\n}\n\nconst generateRandomNumbers = (qty) => {\n  let numbers = [];\n  while (numbers.length < qty) {\n    let random = Math.floor(Math.random() * 100);\n    if (!numbers.includes(random))\n      numbers.push(random);\n  }\n\n  return numbers;\n}\n\nexport { fetchApi, generateRandomNumbers };","\n/*\nconst questions = [\n    { \"question\": \"Is the number of dimensions of a line.\", \"solution\": \"1\", \"options\": [\"3\", \"1\", \"0\", \"4\"] },\n    { \"question\": \"Is the number of polynucleotide strands in a DNA double helix.\", \"answer\": \"2\", \"answers\": [\"2\", \"4\", \"0\", \"5\"] },\n    { \"question\": \"Is the number of sets needed to be won to win the whole match in volleyball.\", \"options\": \"3\", \"answers\": [\"2\", \"4\", \"3\", \"5\"] },\n    { \"question\": \"Is the highest score possible in Olympics gymnastics competitions.\", \"options\": \"10\", \"answers\": [\"9\", \"14\", \"20\", \"10\"] }\n]\n  */\nconst parseQuestionsResponse = (questionsResponse) => {\n    let questions = [];\n\n    Object.keys(questionsResponse).forEach((number) => {\n        questions.push(generateQuestion(number, questionsResponse[number]));\n    });\n\n    return questions;\n}\n\n// return example: { \"question\": \"Is the number of dimensions of a line.\", \"solution\": \"1\", \"options\": [\"3\", \"1\", \"0\", \"4\"] }\nconst generateQuestion = (number, fact) => {\n    return {\n        \"question\": formatFact(number, fact),\n        \"solution\": number,\n        \"options\": generateOptions(number)\n    };\n}\n\n// \"1 is the number of dimensions of a line.\" => \"Is the number of dimensions of a line.\"\nconst formatFact = (number, fact) => {\n    const parseFact = fact.replace(number + \" \", \"\");\n\n    return parseFact[0].toUpperCase() + parseFact.slice(1);\n}\n\n// Return example [2, 3, {solution}, 5]\nconst generateOptions = (solution) => {\n    let numbers = [parseInt(solution)];\n    while (numbers.length < 4) {\n        let random = Math.floor(Math.random() * 100);\n        if (!numbers.includes(random))\n            numbers.push(random);\n    }\n    return numbers.sort(() => Math.random() - 0.5);\n}\n\nexport { parseQuestionsResponse };","import { fetchApi } from './fetchApi';\nimport { parseQuestionsResponse } from './parserQuestions';\nimport { getLocal, setLocal } from './storage';\n\n\nconst fetchQuestions = () => {\n    return fetchApi()\n        .then(data => {\n            return {\n                'questions': parseQuestionsResponse(data),\n                'index': 0,\n                'answersList': []\n            };\n        });   \n}\n\nconst restoreQuestions = () => {\n    return getLocal();\n }\n\n\nconst updateStoredQuestions = (questions, index, answersList) => { \n    setLocal({ 'questions': questions, 'index': index, 'answersList': answersList });\n}\n\nconst clearQuestions = () => {\n    localStorage.removeItem(\"questions\");\n};\n\nexport { fetchQuestions, restoreQuestions, updateStoredQuestions, clearQuestions };","const setLocal = (data) => { \n    localStorage.setItem('questions', JSON.stringify(data));\n};\nconst getLocal = () => { \n    return JSON.parse(localStorage.getItem('questions'));\n};\n\nexport {setLocal, getLocal};","import React from 'react'; \nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n\nconst WelcomeWrapper = styled.div`\n   text-align: center;\n`;\n\nconst Button = styled.button`\n   background-color: ${({ theme }) => { return theme.colors.primary }};\n   border: none;\n   color: black;\n   padding: 15px 32px;\n   text-align: center;\n   text-decoration: none;\n   font-weight: 800;\n   display: inline-block;\n   font-size: 16px;\n   text-transform: uppercase;\n`;\n\n\nfunction Welcome() {\n    return (\n        <WelcomeWrapper>\n            <h3>\n                Welcome to Trividado number quiz!\n            </h3>\n            <Link to=\"/trivial\">\n                <Button\n                    target=\"_blank\"\n                >\n                    Start\n              </Button>\n            </Link>\n        </WelcomeWrapper >\n    );\n}\n\nexport default Welcome;\n","\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst QuestionText = styled.p`\n    font-size: calc(10px + 2vmin);\n    padding: 10px 15px;\n    line-height: 1.5;\n`;\n\nconst AnswersWrapper = styled.ul`\n    list-style: none;\n    width: 20rem; \n    display: flex;\n    align-item: center;\n    justify-content: space-between;\n    margin: 0 auto;\n    flex-wrap: wrap;\n`;\n\nconst AnswerItem = styled.li`\n    flex-basis: 50%;\n    align-items: center;\n    line-height: 2;\n \n`;\n\nconst CircleSelect = styled.div`\n    border-radius: 50%;\n    display: inline-block;\n    width: 1.3rem;\n    height: 1.3rem;\n    background-color: ${({ theme }) => { return theme.colors.primary }};\n    margin: auto 12px 0;\n    text-align: center;\n    &.selected{\n        background-color:${({ theme }) => { return theme.colors.secondary }};\n`;\n\n\nfunction Question(props) {\n    return (\n        <>\n            <QuestionText>{props.question[\"question\"]}</QuestionText>\n            <AnswersWrapper>\n                {props.question[\"options\"].map((option, index) => \n                    <AnswerItem key={index} onClick={props.saveUserAnswer}>\n                    <CircleSelect className={parseInt(props.userAnswer) === option ? 'selected' : \"\"}></CircleSelect>{option}\n                  </AnswerItem>  \n                )}\n            </AnswersWrapper>\n        </>\n    );\n}\n\nexport default Question;","import React from 'react';\nimport styled from 'styled-components';\n\n \nconst UserAnswerListItem = styled.li`\n    list-style: none;\n    line-height: 1.5;\n    padding: 10px;\n\n    & .answer {\n        display:flex;\n        justify-content:center;\n        align-items: center;\n        i {\n          margin-right: 8px;\n          font-size: 2em;\n        }\n        & span{\n            display: inline-block;\n            vertical-align: middle;\n            color: ${({ theme }) => { return theme.colors.secondary }};\n            font-weight: 100;\n            font-size: 0.7em;\n            margin-left: 3px;\n            }\n        &.error{\n            p,i{\n                color: red;\n            }\n        }\n        &.ok {\n            i,p{\n                color: ${({ theme }) => { return theme.colors.primary }};\n            }\n        }\n    }\n`;\n\nconst Line = styled.div`\n    border-top: 1px solid #f5f5f5;  \n    padding: 10px;\n`;\n\nfunction AnswerRecords(props) {\n   \n    const answersList = props.answersList;\n\n   \n    return (\n        <div>\n            <ul>\n                {answersList.map((answer,index) =>\n                    <UserAnswerListItem key={answer.solution + index}>\n                        <Line></Line>\n                        <p>{answer.question}</p>\n                        <div className={answer.status === 'Correct' ? 'answer ok' : \"answer error\"}>\n                            {answer.status === 'Correct' ? <i className=\"fa fa-check-circle\" aria-hidden=\"true\"></i> : <i className=\"fa fa-times-circle\" aria-hidden=\"true\"></i>} \n                            <p>\n                            {answer.status=== 'Correct' ? '' : answer.status}\n                            {answer.status === 'Correct' ? answer.solution : <span>- Rigth answer was { answer.solution}</span>}\n                            </p>\n                        </div>\n                    </UserAnswerListItem>\n                )}\n           </ul>\n        </div>\n    );\n}     \n\nexport default AnswerRecords;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Question from './_Question';\nimport AnswerRecords from './_AnswerRecords';\n\nconst Button = styled.button`\n   background-color: ${props => props.primary ? ({ theme }) => { return theme.colors.primary } : ({ theme }) => { return theme.colors.secondary }};\n   width: 140px;\n   border: none;\n   color: ${({ theme }) => { return theme.colors.black }};\n   padding: 15px 19px;\n   text-decoration: none;\n   font-weight: 800;\n   display: inline-block;\n   font-size: 16px;\n   text-transform: uppercase;\n   margin-top: 40px;\n   margin-bottom: 40px;\n   margin-right: 20px;\n\n   &:last-of-type{\n      margin-right: 0;\n}\n`;\n \nfunction Questions(props) {\n    const questions = props.questions.questions;\n    const [indexQuestions, setIndexQuestions] = useState(props.questions.index);\n    const [question, setQuestion] = useState(questions[0]);\n    const [userAnswer, setUserAnswer] = useState();\n    const [answersList, setAnswerList] = useState(props.questions.answersList);\n    const [disabled, setDisabled] = useState(false);\n\n    const saveUserAnswer = (e) => { \n        const selectedItem = e.currentTarget;\n        setUserAnswer(selectedItem.innerText);\n    }\n\n    const confirmQuestion = () => {\n        let status = 'Correct';\n        if (userAnswer !== question[\"solution\"])\n        {\n            status = 'Error';\n        } \n\n        const newAnswersList = answersList.concat([\n            {\n                \"question\": question[\"question\"],\n                \"status\": status,\n                \"solution\": question[\"solution\"]\n            }\n        ])\n        props.updateQuestions(questions, newAnswersList.length - 1, answersList);\n        setAnswerList(newAnswersList);\n        nextQuestion();\n        buttonDisabled();\n    }\n\n    const skipQuestion = () => {\n        const newAnswersList = answersList.concat([\n            {\n                \"question\": question[\"question\"],\n                \"status\": \"Skipped\",\n                \"solution\": question[\"solution\"]\n            }\n        ]);\n        props.updateQuestions(questions, newAnswersList.length - 1, answersList);\n        setAnswerList(newAnswersList);\n        nextQuestion();\n        buttonDisabled();\n    }\n\n    const nextQuestion = () => { \n        if (indexQuestions < questions.length - 1)\n        {\n            let nextIndexQuestion = indexQuestions + 1;\n            setIndexQuestions(nextIndexQuestion);\n            setQuestion(questions[nextIndexQuestion]);\n        } else\n        { \n            props.setGameOver(true);\n        }\n        \n    }\n\n    const buttonDisabled = () => {\n        if (indexQuestions === questions.length - 1)\n        setDisabled(true);\n    }\n    return (\n        <>    \n            <h2>Question {indexQuestions + 1} of {questions.length}</h2> \n            <div>\n                {!props.gameOver && question && <Question question={question} saveUserAnswer={saveUserAnswer} userAnswer={userAnswer} />}\n            </div>\n            <div>\n                {!props.gameOver && <Button onClick={confirmQuestion} disabled={disabled}>Confirm</Button>}\n                {!props.gameOver && <Button onClick={skipQuestion} disabled={disabled} primary>Skip</Button>}\n            </div>   \n            <AnswerRecords answersList={answersList} />\n            { props.gameOver && <Button onClick={props.resetGame} primary>Play Again</Button> }\n        </>\n    );\n}\n\nexport default Questions;\n","import styled, { createGlobalStyle } from 'styled-components';\nimport React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { fetchQuestions, restoreQuestions, updateStoredQuestions, clearQuestions } from '../services/fetchQuestions';\nimport Welcome from './_Welcome';\nimport Questions from './_Questions';\n\n\nconst GlobalStyle = createGlobalStyle`\n  *{\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: sans-serif;\n  }\n  body{\n    background-color: ${ ({ theme }) => { return theme.colors.dark } };;\n  }\n`;\n\nconst MainWrapper = styled.main`\n  min-height: 100vh;\n  max-width: 1200px;\n  display: flex;\n  flex-direction: column; \n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 1.5vmin);\n  color: ${ ({ theme }) => { return theme.colors.white } };\n  line-height: ${ ({ theme }) => theme.spacing[2] }rem;\n  text-align: center;\n  margin: 0 auto; \n`;\n\nconst Title = styled.h1`\n  text-transform: uppercase;\n  font-size: calc(10px + 6vmin);\n`;\n\nfunction App() {\n  const [questions, setQuestions] = useState(restoreQuestions());\n  const [answersList, setAnswerList] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  if (!questions)\n  {\n    fetchQuestions()\n      .then(questions => {\n        setQuestions(questions);\n      });\n  }\n  \n  const resetGame = () => { \n    setGameOver(false);\n    clearQuestions();\n    window.location = \"/\"; \n  }\n\n  const updateQuestions = (questions, index, answersList) => { \n    updateStoredQuestions(questions, index, answersList);\n  };\n  return (\n    <>\n       <GlobalStyle />\n      <MainWrapper>\n        <Title>\n          Trividado\n        </Title>\n        <Switch>\n            <Route exact path=\"/\" render={props => <Welcome {...props} />} />\n            <Route path=\"/trivial\" render={props => <Questions {...props} questions={questions} answersList={answersList} setAnswerList={setAnswerList} resetGame={resetGame}\n              setGameOver={setGameOver} gameOver={gameOver} updateQuestions={updateQuestions} />\n            } />\n        </Switch> \n      </MainWrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { ThemeProvider } from 'styled-components';\nimport { HashRouter } from 'react-router-dom';\n\nconst theme = {\n  colors: {\n    primary: '#70b25e', //green\n    secondary: '#ccc', // grey\n    dark: '#282c34', // page background\n    white: '#ffffff',\n    black: '#333333'\n  },\n  spacing: [0, 4, 8, 12, 16, 20],\n}\n\nReactDOM.render(\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}